<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}


{% block content %} 
   <style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black; 
        height: 400px; 
        width: 800px; 
        overflow: auto;
        padding: 2px;
    }

    .container {
        display: flex;
        
    }

    
    #friends_box {
        border: 1px solid black; 
        height: 400px; 
        width: 200px; 
        overflow: auto;
        padding: 2px;
    }

    #requestBar {
        margin-left: 40px; 
        border: 1px solid black; 
        height: 300px; 
        width: 200px; 
        overflow: auto;
        padding: 2px;
    }

    #requestSentBar {
        margin-left: 40px; 
        border: 1px solid black; 
        height: 300px; 
        width: 200px; 
        overflow: auto;
        padding: 2px;
    }

    #friendRequestTitle {
        margin-left: 130px;
    }

    #friendRequestSentTitle {
        margin-left: 80px;
    }

    .text  {
        margin-top: 2px;
        margin-bottom: 2px;
    }

</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} </li>
    </ol>
</nav>

<h1>Messaging App </h1>

<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none" >
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>

    <!-- Starting the friends list making here -->


    <div class="container">
        
        <section>
            <h2>Friend List</h2>
        </section>
        
        <section id="friendRequestTitle">
            <h2>Friend Requests</h2>
            
        </section>

        <section id="friendRequestSentTitle">
            <h2>Friend Requests Sent</h2>
        </section>
    </div>
    




    <!-- Add friend box -->
    <div class="container">
        
        <section id="friends_box">
        
            <ul>
                {% for friend in friends %}
                    <li>{{ friend }}</li>
                {% endfor %}
                
               
            <ul>
        
        
        </section>
    
        <!-- Add friend bar -->
        <section id="requestBar">
        
        <ul>
            {% for request in friend_requests %}
                <li>{{ request }}
                        <! -- Accept friend request form -->
                    <form action="/accept_friend_request" method="post">
                        <input type="hidden" name="username" value="{{ username }}">
                        <input type="hidden" name="friend_username" value="{{ request }}">
                        <button type="submit">Accept</button>
                    </form>

                    <!-- Reject friend request form -->
                    <form action="/reject_friend_request" method="post">
                        <input type="hidden" name="username" value="{{ username }}">
                        <input type="hidden" name="friend_username" value="{{ request }}">
                        <button type="submit">Reject</button>
                    </form>

                </li>



            {% endfor %}
        
        

        </section>

        <!-- Friend request sent bar -->
        <section id="requestSentBar">
            <ul>
                {% for request in friend_requests_sent %}
                    <li>{{ request }}</li>
                {% endfor %}
            </ul>
    </div>

    <!-- Send Friend request forms [POST] -->
    <section>
    
        <form action="/add_friend" method="post">
        
            <input type="hidden" name="username" value="{{ username }}">
            <p class="text">Add friend:</p>

            <input type="text" name="friend_username" placeholder="Enter friends's Username here">
            <input type="submit" value="Add Friend">
        </form>
    
    </section>
        




</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })


    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case

        generateKeyPair();

        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        
    

        // decrypt the message
       

        
        if (msg.length > 200) {
            handleIncomingMessage(msg, color);
        }
        else {
            add_message(msg, color);
        }
        

        //add_message(msg, color);


    })
    
    // we'll send the message to the server by emitting a "send" event
    // WHen sending the MAC we send the message, mac , and the key
    async function send() {
        let message = $("#message").val();

        add_message(username + ": " + message, "black");
        // retrieve the public key of the receiver
        const receiver = $("#receiver").val();
        console.log(receiver);
        const targetsPublicKeyPEM = await fetchPublicKey(receiver); // receiver's public key in PEM format
        const targetsPublicKey = await importPublicKey(targetsPublicKeyPEM); // receiver's public key in CryptoKey format
        
        // encrypt the message with the receiver's public key
        const encryptedMessage = await encryptMessage(message, targetsPublicKey);
        
        console.log("Encrypted Message: ", encryptedMessage);
        console.log("Message: ", message);


    

        

        $("#message").val("");
        socket.emit("send", username, encryptedMessage, room_id);  
    } 

    // encrypt the message with the receiver's public key
    async function encryptMessage(message, targetsPublicKey){

        const encoder = new TextEncoder();
        const data = encoder.encode(message);
        const encryptedData = await window.crypto.subtle.encrypt(
            {
                name: "RSA-OAEP",
                hash: { name: "SHA-256" }
            },
            targetsPublicKey,
            data
        );
        const base64Encode = window.btoa(String.fromCharCode(...new Uint8Array(encryptedData)));
        
        return base64Encode;

    }

    async function decryptMessage(encryptedMessage, privateKey) {

        if (!privateKey || !(privateKey instanceof CryptoKey)) {
            console.error("Invalid private key provided:", privateKey);
            return null;
        }


        console.log("privateKey: ", privateKey)
        try {

            const encodedMessage = window.atob(encryptedMessage);
            const bytes = new Uint8Array(encodedMessage.length).map((_, i) => encodedMessage.charCodeAt(i));
            


            const decryptedData = await window.crypto.subtle.decrypt(
                { name: "RSA-OAEP", hash: { name: "SHA-256" } },
                privateKey,
                bytes
            );
            const decoder = new TextDecoder();
            return decoder.decode(decryptedData);
        } catch (error) {
            console.error("Decryption failed:", error);
            throw new Error("Decryption process failed, possibly due to incorrect encoding.");;
        }
    }

    async function handleIncomingMessage(encryptedMessage, color) {
        try {
            const privateKey = await getPrivateKey(); // wait for the private key to be fetched
            if (!privateKey || !(privateKey instanceof CryptoKey)) {
                console.error("Invalid or undefined private key:", privateKey);
                return;
            }

            const index = encryptedMessage.indexOf(':');
            const firstPart = encryptedMessage.slice(0, index+1);
            const secondPart = encryptedMessage.slice(index+1);

            console.log("First Encoded Message Before Decoding:", firstPart);
            console.log("Second Encoded Message Before Decoding:", secondPart);
    
            
            const decryptedMessage = await decryptMessage(secondPart, privateKey);
            console.log("Decrypted Message: ", decryptedMessage);

            const message = firstPart + decryptedMessage;

            add_message(message, color);
            console.log("ran add message")
        } catch (error) {
            console.error("Error handling incoming message:", error);
        }
    }

    
    



    // we emit a join room event to the server to join a room
    async function join_room() {
       
        let receiver = $("#receiver").val();
        

        // check if they are friends
        let friends_list = await fetchFriendsList(username);
        if (!friends_list.includes(receiver)) {
            alert("You are not friends with this user");
            return;
        }

        


        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {

        let displayMessage = message;

        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(displayMessage);
        box.append(child);
    }



    // Generate KeyPair
    async function generateKeyPair() {
        const keyPair = await window.crypto.subtle.generateKey(
            {
                name: "RSA-OAEP",
                modulusLength: 2048,
                publicExponent: new Uint8Array([1, 0, 1]),
                hash: "SHA-256",
            },
            true,
            ["encrypt", "decrypt"]
        );


        const publicKey = await window.crypto.subtle.exportKey("spki", keyPair.publicKey);
        const publicKeyPem = spkiToPem(publicKey); // pem format to store on server
        

        // send pub key to server
        await fetch("/save_Public_Key", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                username: "{{ username }}",
                publicKey: publicKeyPem }),
        });

        // store private key in indexedDB
        await storePrivateKey(keyPair.privateKey);

        // must send public key to server now
        return keyPair;
    }

 

    // Convert SPKI to PEM
    function spkiToPem(spki) {

        const pemHeader = '-----BEGIN PUBLIC KEY-----\n';
        const pemFooter = '-----END PUBLIC KEY-----';
        let base64 = btoa(String.fromCharCode(...new Uint8Array(spki))); // string format 

        let formattedBase64 = base64.match(/.{1,64}/g).join('\n'); // split into 64 character lines

        
        return pemHeader + formattedBase64 + '\n' + pemFooter;
    }


    // store prive key in indexedDB storage
    async function storePrivateKey(privateKey) {
        const exportedKey = await window.crypto.subtle.exportKey('pkcs8', privateKey);
        const db = await window.indexedDB.open("keyPairs", 1);

        db.onupgradeneeded = function() {
            const db = this.result;
            if (!db.objectStoreNames.contains('keys')) {
                db.createObjectStore('keys', { keyPath: 'id' });
            }
        };


        db.onsuccess = async function() {
            const db = this.result;
            const transaction = db.transaction('keys', 'readwrite');
            const store = transaction.objectStore('keys');
            await store.put({id: 'privateKey', key: exportedKey});
            console.log("Private Key stored in indexedDB");
            transaction.oncomplete = () => console.log("Private Key storage complete");
        };

        db.oneerror = function(e) {
            console.log("Error storing private key in indexedDB");
        };
    }

    async function getPrivateKey2() {
        const db = window.indexedDB.open('keyPairs', 1);
        return new Promise((resolve, reject) => {
            
    
            db.onsuccess = function() {
                const store = this.result.transaction('keys', 'readonly').objectStore('keys');
                const request = store.get('privateKey');
    
                request.onsuccess = function() {
                    resolve(request.result.key);
                };
    
                request.onerror = function(e) {
                    reject('Error fetching the private key: ', e.target.error);
                };
            };
        });
    }

    async function getPrivateKey() {
        const db = await window.indexedDB.open('keyPairs', 1);
        return new Promise((resolve, reject) => {
            db.onsuccess = function() {
                const db = this.result;
                const transaction = db.transaction('keys', 'readonly');
                const store = transaction.objectStore('keys');
                const request = store.get('privateKey');
    
                request.onsuccess = async function() {
                    const exportedKey = request.result.key;  // arrayBuffer
                    try {
                        const privateKey = await window.crypto.subtle.importKey(
                            'pkcs8',
                            exportedKey,
                            {   
                                name: "RSA-OAEP",
                                hash: { name: "SHA-256" },
                            },
                            true,
                            ["decrypt"]
                        );
                        resolve(privateKey);
                    } catch (error) {
                        reject('Failed to import the private key: ' + error);
                    }
                };
    
                request.onerror = function(e) {
                    reject('Error fetching the private key from IndexedDB: ' + e.target.error);
                };
            };
        });
    }
    


    async function fetchPublicKey(username) {
        try {
            const response = await fetch(`/get_Public_Key/${username}`);
            if (response.ok) {
                const data = await response.json();
                //console.log("Public Key: ", data.public_key);
                return data.public_key;
            } else {
                throw new Error('Failed to fetch public key');
            }
        } catch (error) {
            console.error('Error fetching public key:', error);
            return null;  
        }
    }


    // get friends list
    async function fetchFriendsList(username) {
        try {

            
            const response = await fetch(`/get_FriendsList/${username}`);
            if (response.ok) {
                const data = await response.json();
                
                return data.friends_list;
            } else {
                throw new Error('Failed to fetch friends list');
            }
        } catch (error) {
            console.error('Error fetching friends list:', error);
            return null;  
        }
    }

    // PEM to public key
    async function importPublicKey(pem) {
        if (typeof pem !== 'string') {
            console.error("PEM is not a string:", pem);
            throw new Error("PEM key must be a string.");
        }
        const pemHeader = "-----BEGIN PUBLIC KEY-----";
        const pemFooter = "-----END PUBLIC KEY-----";
        let base64 = pem.replace(pemHeader, '').replace(pemFooter, '').replace(/\s/g, '');
        const binaryDer = window.atob(base64);
        return window.crypto.subtle.importKey(
            "spki",
            new Uint8Array([...binaryDer].map(char => char.charCodeAt(0))),
            {   
                name: "RSA-OAEP",
                hash: "SHA-256"
            },
            true,
            ["encrypt"]
        );
    }

    
</script>
{% endblock %}

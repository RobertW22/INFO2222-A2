<!-- Here you'll find the main exhibit: the chat application code. Feel free to look around! -->
{% extends 'base.jinja' %}
{% block content %}
<style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto
    }

    #message_box {
        border: 1px solid black;
        height: 400px;
        width: 800px;
        overflow: auto;
        padding: 2px;
    }

    .container {
        display: flex;
    }

    .list-section {
        border: 1px solid black;
        height: 400px;
        width: 200px;
        overflow: auto;
        padding: 2px;
        margin-right: 20px;
    }

    .list-section h2 {
        margin-top: 0;
        padding: 5px;
    }

    .list-section ul {
        list-style-type: none;
        padding: 5px;
    }

    .list-section li {
        margin-bottom: 5px;
    }

    .text {
        margin-top: 2px;
        margin-bottom: 2px;
    }

    .status {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 5px;
    }

    .online {
        background-color: green;
    }

    .offline {
        background-color: gray;
    }
</style>

<!--Navbar, you'll see the username here-->
<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
        <li style="display:inline-block">Username: {{ username }}</li>
    </ol>
</nav>

<h1>Messaging App </h1>

<main>
    <!-- The messages are displayed here -->
    <section id="message_box"></section>

    <!-- These part ideally should be a form element, but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute, but we're using it anyways coz its easy :)-->
        <button id="join-room-btn">Chat</button>
    </section>

    <!-- The (message) input box is set to display: none initially, this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none">
        <p class="text">Message: </p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <button onclick="leave()">Leave Room</button>
    </section>

    <!-- Friends List and Friend Requests -->
    <br>
    <div class="container">
        <!-- Friends List -->
        <section class="list-section">
            <h2>Friends List</h2>
            <ul id="friends-list">
                {% for friend in friends %}
                <li>
                    <span class="status offline" id="status-{{ friend }}"></span>
                    <a href="#" onclick="openChatroom('{{ friend }}')">{{ friend }}</a>
                </li>
                {% endfor %}
            </ul>
        </section>

        <!-- Friend Requests -->
        <section class="list-section">
            <h2>Friend Requests</h2>
            <ul>
                {% for request in friend_requests %}
                <li>{{ request }}</li>
                {% endfor %}
            </ul>
        </section>
    </div>
</main>

<script src="/static/js/libs/socket.io.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jsencrypt/3.2.1/jsencrypt.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>

<script>
    let room_id = 0;

    // when the user presses the "Enter" key inside of the "message box",
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
    $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })

    //$(document).ready(() => {
    //    // room_id is undefined if the user hasn't joined a room
    //    // we early return in this case
    //    if (Cookies.get("room_id") == undefined) {
    //        return;
    //    }

    //    // the user has already joined an existing room
    //    // we'll display the message box, instead of the "Chat with: " box
    //    $("#chat_box").hide();
    //    $("#input_box").show();
    //    room_id = parseInt(Cookies.get("room_id"));
    //})

    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";
    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (data, color) => {
        if (typeof data === "string") {
            add_message(data, color);
        } else if (Array.isArray(data) && data.length === 3) {
            let [username, encrypted_message, mac] = data;
            // Retrieve the shared secret from localStorage or secure storage
            let sharedSecretKey = localStorage.getItem("sharedSecretKey");
            
            // Check if sharedSecretKey is not null or undefined
            if (sharedSecretKey) {
                // Verify message integrity
                let isValid = verifyMAC(encrypted_message, mac, sharedSecretKey);
                if (isValid) {
                    // Decrypt message
                    let decryptedMessage = decryptMessage(encrypted_message, privateKey);
                    add_message(`${username}: ${decryptedMessage}`);
                } else {
                    add_message("Message integrity compromised!", "red");
                }
            } else {
                // Handle the case when sharedSecretKey is null or undefined
                console.error("Shared secret key is missing or invalid.");
                add_message("Error: Unable to verify message integrity.", "red");
            }
        }
    });

    // Event listener for "user_connected" event
    socket.on("user_connected", (username) => {
        $(`#status-${username}`).removeClass("offline").addClass("online");
    });

    // Event listener for "user_disconnected" event
    socket.on("user_disconnected", (username) => {
        $(`#status-${username}`).removeClass("online").addClass("offline");
    });

    // Event listener for "public_key_response" event
    socket.on('public_key_response', (receiverPublicKey) => {
        console.log("Received public key:", receiverPublicKey);
        console.log("Type of receiverPublicKey:", typeof receiverPublicKey);

        // Format public key
        const formattedPublicKey = formatPublicKey(receiverPublicKey);
        console.log("Formatted Public Key:", formattedPublicKey);

        // Retrieve private key from localStorage
        let privateKey = localStorage.getItem("privateKey");
        console.log("Private Key:", privateKey); // Debugging: Check if private key is retrieved correctly

        // Retrieve shared secret key from localStorage
        let sharedSecretKey = localStorage.getItem("sharedSecretKey");
        console.log("Shared Secret Key:", sharedSecretKey); // Debugging: Check if shared secret key is retrieved correctly

        // Encrypt message using formatted receiver's public key
        let encryptedMessage = encryptMessage(message, formattedPublicKey);
        console.log("Encrypted Message:", encryptedMessage); // Debugging: Check if message is encrypted correctly

        // Generate MAC using shared secret key
        let mac = generateMAC(encryptedMessage, sharedSecretKey);
        console.log("MAC:", mac); // Debugging: Check if MAC is generated correctly

        console.log("Sending message:", {
            username: username,
            encryptedMessage: encryptedMessage,
            mac: mac,
            room_id: room_id
        }); // Debugging: Log data being sent

        socket.emit("send", username, encryptedMessage, mac, room_id);
    });

    // Function to send a message
    function send() {
        let message = $("#message").val();
        console.log("Message to be sent:", message); // Debugging: Check if the message is correct
        $("#message").val("");
        let receiver = $("#receiver").val();

        // Request the receiver's public key from the server
        socket.emit('request_public_key', receiver);
    }

    // Function to join a room
    function join_room() {
        let receiver = $("#receiver").val();
        if (receiver === "") {
            alert("Please enter a username to chat with.");
            return;
        }

        // Retrieve user's public key from localStorage
        let publicKey = localStorage.getItem("publicKey");

        // Pass public key to server when emitting "join" event
        socket.emit("join", username, receiver, publicKey, (response) => {
            console.log("Server response:", response);
            console.log("Response type:", typeof response);
            console.log("Response keys:", Object.keys(response));
            
            if (typeof response === "object" && response.room_id && response.receiver_public_key && response.shared_secret_key) {
                let room_id = response.room_id;
                let receiverPublicKey = response.receiver_public_key;
                let sharedSecretKey = response.shared_secret_key;
                // Store room_id and sharedSecretKey in localStorage
                Cookies.set("room_id", room_id);
                localStorage.setItem("sharedSecretKey", sharedSecretKey);
                // Update room_id variable
                room_id = response.room_id;
                // Show input box and hide chat box
                $("#chat_box").hide();
                $("#input_box").show();
                // Encrypt message using receiver's public key
                // let encryptedMessage = encryptMessage(message, receiverPublicKey);
            } else {
                alert("Error: Invalid server response");
                console.error("Invalid server response:", response);
            }
        });
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    // Function to format public key
    function formatPublicKey(publicKey) {
        // Remove newline characters and extra whitespace
        publicKey = publicKey.replace(/\n/g, "").replace(/\s+/g, "");
        // Insert newline characters every 64 characters
        const formatted = publicKey.match(/.{1,64}/g).join("\n");
        return `-----BEGIN PUBLIC KEY-----\n${formatted}\n-----END PUBLIC KEY-----`;
    }

    // Function to open a chatroom when user clicks on a friend in friend list
    function openChatroom(friend) {
        $("#receiver").val(friend);
        join_room();
    }

    // Function to encrypt a message
    function encryptMessage(message, publicKey) {
        const encrypt = new JSEncrypt();
        encrypt.setPublicKey(publicKey);
        const encryptedMessage = encrypt.encrypt(message);
        return encryptedMessage;
    }

    // Function to generate a MAC
    function generateMAC(message, secretKey) {
        const mac = CryptoJS.HmacSHA256(message, secretKey);
        return mac.toString(CryptoJS.enc.Hex);
    }

    // Function to verify a MAC
    function verifyMAC(message, mac, secretKey) {
        if (typeof secretKey !== 'string') {
            console.error("Shared secret key must be a string");
            return false;
        }
        const expectedMac = CryptoJS.HmacSHA256(message, secretKey).toString(CryptoJS.enc.Hex);
        return mac === expectedMac;
    }

    // Function to decrypt a message
    function decryptMessage(encryptedMessage, privateKey) {
        const decrypt = new JSEncrypt();
        decrypt.setPrivateKey(privateKey);
        const decryptedMessage = decrypt.decrypt(encryptedMessage);
        return decryptedMessage;
    }

    // Event listener for "join-room-btn" click event
    document.getElementById('join-room-btn').addEventListener('click', join_room);
</script>
{% endblock %}